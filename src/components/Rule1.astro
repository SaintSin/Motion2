---

---

<p>Rule 1</p>
<hr class="rule1 animate" />

<style>
	.animate {
		max-width: 100vw;
		overflow-y: hidden;
	}
	.rule1 {
		display: block;
		transition: all 0.3s ease-in-out;
		border: 0px solid;
		width: 70%;
		color: grey;

		&::before {
			display: block;
			transition: all 1s;
			margin: auto;

			margin-block-end: 6px;
			border: 1px solid var(--stone-9);
			width: 100%;
			content: ' ';
		}
		&::after {
			display: block;
			opacity: 10%;
			transition: all 1s;
			margin: auto;
			margin-block-end: 0px;
			border: 1px solid var(--stone-11);
			width: 50%;
			content: ' ';
		}
		&:hover {
			transition: all 0.3s ease-in-out;
			width: 100%;
		}
	}
	.rule1.visible {
		display: block;
		&::before {
			width: 70%;
		}
		&::after {
			opacity: 100%;
			width: 100%;
		}
	}
</style>
<script>
	import { inView } from 'motion';
	// Function to initialize motion observers
	function initMotionObservers() {
		inView(
			'.animate',
			(element, info) => {
				console.log('Element', element, ' has entered the viewport');
				element.classList.add('visible');

				return () => {
					element.classList.remove('visible');
				};
			},
			{
				// Only trigger once (don't remove class when leaving)
				// amount: "some", // Trigger when any part is visible
				margin: '0px', // Trigger 100px before entering viewport
			}
		);
	}

	// Initialize on first load
	document.addEventListener('DOMContentLoaded', initMotionObservers);

	// Reinitialize after each Astro view transition
	document.addEventListener('astro:page-load', initMotionObservers);

	// Optional: Clean up before transitions (if needed)
	document.addEventListener('astro:before-preparation', () => {
		// Any cleanup logic if needed
	});

	// Alternative approach: Using astro:after-swap for immediate DOM updates
	document.addEventListener('astro:after-swap', () => {
		// This fires immediately after the new page content is swapped in
		// but before astro:page-load
		initMotionObservers();
	});
</script>
