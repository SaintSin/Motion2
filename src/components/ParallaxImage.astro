---
// ParallaxImage.astro
import { Image } from "astro:assets";
import image1 from "@images/panda-11.jpg";
// Try negative and positive values for data-parallax-speed
---

<div class="parallax-container">
  <div class="parallax-image-wrapper">
    <Image
      src={image1}
      alt="Parallax Panda"
      class="parallax-image"
      data-parallax
      data-parallax-speed="-0.1"
      layout="full-width"
    />
  </div>
</div>

<script>
  import Lenis from "lenis";

  // Global variables
  let lenis;
  let rafId;
  let observer;
  let visibleElements = new Set();
  let isInitialized = false;

  // Initialize Lenis
  function initLenis() {
    if (lenis) {
      lenis.destroy();
    }

    lenis = new Lenis({
      duration: 1.2,
      easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),
    });

    // Animation frame loop
    function raf(time) {
      lenis.raf(time);
      rafId = requestAnimationFrame(raf);
    }
    rafId = requestAnimationFrame(raf);

    // Update parallax on scroll
    lenis.on("scroll", updateParallax);
  }

  // Initialize Intersection Observer
  function initObserver() {
    if (observer) {
      observer.disconnect();
    }

    observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const element = entry.target;
          if (entry.isIntersecting) {
            visibleElements.add(element);
          } else {
            visibleElements.delete(element);
          }
        });
      },
      {
        rootMargin: "100px 0px 100px 0px",
        threshold: 0,
      }
    );

    // Observe all parallax elements
    const parallaxElements = document.querySelectorAll("[data-parallax]");
    parallaxElements.forEach((element) => {
      const container = element.closest(".parallax-container");
      if (container) {
        observer.observe(container);
      }
    });
  }

  // Parallax effect (only for visible elements)
  function updateParallax() {
    visibleElements.forEach((container) => {
      const element = container.querySelector("[data-parallax]");
      if (!element) return;

      const rect = container.getBoundingClientRect();
      const windowHeight = window.innerHeight;

      const elementTop = rect.top;
      const elementBottom = rect.bottom;

      if (elementBottom >= 0 && elementTop <= windowHeight) {
        const parallaxSpeed = parseFloat(element.dataset.parallaxSpeed) || -0.5;
        const yPos = (elementTop - windowHeight / 2) * parallaxSpeed;
        element.style.transform = `translateY(${yPos}px)`;
      }
    });
  }

  // Handle window resize
  function handleResize() {
    updateParallax();
  }

  // Initialize everything
  function init() {
    if (isInitialized) return;

    initLenis();
    initObserver();
    window.addEventListener("resize", handleResize);
    updateParallax();
    isInitialized = true;
  }

  // Cleanup function
  function cleanup() {
    if (observer) {
      observer.disconnect();
      observer = null;
    }

    if (lenis) {
      lenis.destroy();
      lenis = null;
    }

    if (rafId) {
      cancelAnimationFrame(rafId);
      rafId = null;
    }

    window.removeEventListener("resize", handleResize);
    visibleElements.clear();
    isInitialized = false;
  }

  // Astro view transitions event listeners
  document.addEventListener("astro:page-load", init);
  document.addEventListener("astro:before-preparation", cleanup);

  // Also initialize on first load if transitions aren't enabled
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", init);
  } else {
    init();
  }
</script>

<style>
  .parallax-container {
    position: relative;
    height: 300px; /* Adjust as needed */
    overflow: hidden;
    margin: 2rem 0;
    border-radius: 1rem;
  }

  .parallax-image-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .parallax-image {
    position: absolute;
    top: -75%; /* Start image higher to show bottom 50% initially */
    left: 0;
    height: 250%;
    object-fit: cover;
    will-change: transform;
  }
</style>
