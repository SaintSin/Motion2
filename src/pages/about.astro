---
import { Image, Picture } from "astro:assets";

import Layout from "@layouts/BaseLayout.astro";

const meta = {
  title: "Welcome to Astro",
  description: "The metadescription",
  imageOG: "generic-social-1200x630.png",
  altOG: "Alt text for OG image",
};
import image1 from "@images/panda-01.jpg";
---

<Layout metaData={meta}>
  <main class="wrapper">
    <h1>About</h1>
    <h2>Full width layout, resizing images</h2>
  </main>
  <div class="full-width-split-screen">
    <Image src={image1} alt="X" quality={50} layout="full-width" />
    <div>
      <p>
        Lorem ipsum, dolor sit amet consectetur adipisicing elit. Aspernatur
        quos nobis, illum a modi commodi necessitatibus corrupti, laboriosam,
        sequi perspiciatis blanditiis asperiores ea quo quam fuga neque maiores
        molestias consequuntur.
      </p>
      <p>
        Lorem ipsum, dolor sit amet consectetur adipisicing elit. Aspernatur
        quos nobis, illum a modi commodi necessitatibus corrupti, laboriosam,
        sequi perspiciatis blanditiis asperiores ea quo quam fuga neque maiores
        molestias consequuntur.
      </p>
      <p>
        Lorem ipsum, dolor sit amet consectetur adipisicing elit. Aspernatur
        quos nobis, illum a modi commodi necessitatibus corrupti, laboriosam,
        sequi perspiciatis blanditiis asperiores ea quo quam fuga neque maiores
        molestias consequuntur. Lorem ipsum dolor sit amet consectetur,
        adipisicing elit. Iusto, accusantium. Animi vitae inventore ipsam
        deleniti natus dolorem fugiat sunt vel molestiae! Non error recusandae
        beatae minima, libero voluptatem repellat ipsa!
      </p>
    </div>
  </div>
  <div class="full-width-split-screen">
    <div>
      <p>
        Lorem ipsum, dolor sit amet consectetur adipisicing elit. Aspernatur
        quos nobis, illum a modi commodi necessitatibus corrupti, laboriosam,
        sequi perspiciatis blanditiis asperiores ea quo quam fuga neque maiores
        molestias consequuntur.
      </p>
      <p>
        Lorem ipsum, dolor sit amet consectetur adipisicing elit. Aspernatur
        quos nobis, illum a modi commodi necessitatibus corrupti, laboriosam,
        sequi perspiciatis blanditiis asperiores ea quo quam fuga neque maiores
        molestias consequuntur.
      </p>
      <p>
        Lorem ipsum, dolor sit amet consectetur adipisicing elit. Aspernatur
        quos nobis, illum a modi commodi necessitatibus corrupti, laboriosam,
        sequi perspiciatis blanditiis asperiores ea quo quam fuga neque maiores
        molestias consequuntur. Lorem ipsum dolor sit amet consectetur,
        adipisicing elit. Iusto, accusantium. Animi vitae inventore ipsam
        deleniti natus dolorem fugiat sunt vel molestiae! Non error recusandae
        beatae minima, libero voluptatem repellat ipsa!
      </p>
    </div>
    <Picture src={image1} alt="X" quality={50} layout="full-width" />
  </div>
</Layout>
<style>
  * {
    outline: solid 1px red;
    line-height: var(--font-lineheight-3);
    font-family: var(--font-sans);
  }

  :root {
    --wrapper-padding-inline: var(--size-fluid-4);
    --wrapper-max-width: 120ch;
    --section-padding-block: var(--size-fluid-4);
    --paragraph-max-width: 55ch;
  }

  .full-width-split-screen {
    padding-block: 0;
  }
  .full-width-split-screen img {
    /* outline: 2px solid red; */
    object-fit: cover;
  }

  .full-width-split-screen > :not(img) {
    padding-inline: var(--wrapper-padding-inline);
    padding-block: var(--wrapper-padding-inline);
  }
  @media (min-width: 600px) {
    .full-width-split-screen {
      display: grid;
      position: relative;
      grid-template-columns:
        minmax(var(--wrapper-padding-inline), 1fr)
        minmax(0, calc(var(--wrapper-max-width) / 2))
        minmax(0, calc(var(--wrapper-max-width) / 2))
        minmax(var(--wrapper-padding-inline), 1fr);
    }
    .full-width-split-screen > img:first-child {
      grid-column: 1 / 3;
    }
    .full-width-split-screen > img:last-child {
      grid-column: 3 / -1;
    }
    .full-width-split-screen > :not(img) {
      display: grid;
      align-content: start;
    }
    .full-width-split-screen > :not(img):first-child {
      grid-column: 2 / 3;
    }
    .full-width-split-screen > :not(img):last-child {
      grid-column: 3 / 4;
    }
    .full-width-split-screen > :not(img)::before {
      position: absolute;
      inset: 0;
      background: inherit;
      content: " ";
    }
    .full-width-split-screen > :not(img):first-child::before {
      grid-column: 1 / 2;
    }
    .full-width-split-screen > :not(img):last-child::before {
      grid-column: 4 / 5;
    }
  }
</style>
<script>
  function matchSplitScreenImageHeights(): void {
    const splitScreens = document.querySelectorAll<HTMLElement>(
      ".full-width-split-screen",
    );

    splitScreens.forEach((container) => {
      const images = container.querySelectorAll<HTMLImageElement>("img");
      const pictures =
        container.querySelectorAll<HTMLPictureElement>("picture");
      const nonImageElements = Array.from(container.children).filter(
        (child): child is HTMLElement =>
          child.tagName !== "IMG" && child.tagName !== "PICTURE",
      );

      // Reset any previously set heights
      images.forEach((img) => {
        img.style.height = "";
        img.style.minHeight = "";
      });

      pictures.forEach((picture) => {
        picture.style.height = "";
        picture.style.minHeight = "";
        // Also reset the img inside the picture element
        const innerImg = picture.querySelector<HTMLImageElement>("img");
        if (innerImg) {
          innerImg.style.height = "";
          innerImg.style.minHeight = "";
        }
      });

      // Check if we're in desktop mode (matches the CSS media query)
      const isDesktop = window.matchMedia("(min-width: 600px)").matches;

      if (!isDesktop) {
        // On mobile, let images maintain their natural aspect ratio
        return;
      }

      // On desktop, match image heights to content heights
      if (
        (images.length > 0 || pictures.length > 0) &&
        nonImageElements.length > 0
      ) {
        // Get the maximum height of all non-image elements
        let maxContentHeight = 0;

        nonImageElements.forEach((element) => {
          const rect = element.getBoundingClientRect();
          maxContentHeight = Math.max(maxContentHeight, rect.height);
        });

        // Apply the height to all images and pictures
        if (maxContentHeight > 0) {
          images.forEach((img) => {
            img.style.height = `${maxContentHeight}px`;
            img.style.minHeight = `${maxContentHeight}px`;
          });

          pictures.forEach((picture) => {
            picture.style.height = `${maxContentHeight}px`;
            picture.style.minHeight = `${maxContentHeight}px`;
            // Apply the same height to the img inside the picture element
            const innerImg = picture.querySelector<HTMLImageElement>("img");
            if (innerImg) {
              innerImg.style.height = `${maxContentHeight}px`;
              innerImg.style.minHeight = `${maxContentHeight}px`;
              innerImg.style.objectFit = "cover";
            }
          });
        }
      }
    });
  }

  // Debounce function to prevent excessive resize event firing
  function debounce<T extends (...args: any[]) => void>(
    func: T,
    wait: number,
  ): (...args: Parameters<T>) => void {
    let timeout: NodeJS.Timeout;
    return (...args: Parameters<T>) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => func(...args), wait);
    };
  }

  // Initialize the height matching
  function initSplitScreenHeightMatcher(): void {
    // Run immediately when DOM is ready
    if (document.readyState === "loading") {
      document.addEventListener(
        "DOMContentLoaded",
        matchSplitScreenImageHeights,
      );
    } else {
      matchSplitScreenImageHeights();
    }

    // Run on window resize with debouncing
    const debouncedResize = debounce(matchSplitScreenImageHeights, 150);
    window.addEventListener("resize", debouncedResize);

    // Also run when images load (in case they affect layout)
    const images = document.querySelectorAll<HTMLImageElement>(
      ".full-width-split-screen img",
    );
    const pictures = document.querySelectorAll<HTMLPictureElement>(
      ".full-width-split-screen picture",
    );

    images.forEach((img) => {
      if (img.complete) {
        // Image already loaded
        matchSplitScreenImageHeights();
      } else {
        // Wait for image to load
        img.addEventListener("load", matchSplitScreenImageHeights);
        img.addEventListener("error", matchSplitScreenImageHeights);
      }
    });

    pictures.forEach((picture) => {
      const innerImg = picture.querySelector<HTMLImageElement>("img");
      if (innerImg) {
        if (innerImg.complete) {
          // Image already loaded
          matchSplitScreenImageHeights();
        } else {
          // Wait for image to load
          innerImg.addEventListener("load", matchSplitScreenImageHeights);
          innerImg.addEventListener("error", matchSplitScreenImageHeights);
        }
      }
    });
  }

  // Auto-initialize
  initSplitScreenHeightMatcher();

  // Export for manual use if needed
  export { matchSplitScreenImageHeights, initSplitScreenHeightMatcher };
</script>
